name: Build & Deploy to K8S
on:
  push:
    branches:
      - main

jobs:
  check-diff:
    name: A job to determine which folder to build & deploy.
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Check whether frontend folder has been modified.
        id: frontend-modified
        uses: tj-actions/changed-files@v14.4
        with:
          files: |
            frontend

      - name: Check whether backend folder has been modified.
        id: backend-modified
        uses: tj-actions/changed-files@v14.4
        with:
          files: |
            backend
    outputs:
      frontend-modified: ${{ steps.frontend-modified.outputs.any_modified }}
      backend-modified: ${{ steps.backend-modified.outputs.any_modified }}

  build-frontend:
    name: A job to build frontend project.
    runs-on: ubuntu-latest
    needs: check-diff
    env:
      CI: false
    if: needs.check-diff.outputs.frontend-modified == 'true'
    steps:
      - uses: actions/checkout@v2

      - name: Run yarn install.
        uses: borales/actions-yarn@v2.3.0
        with:
          cmd: --cwd ./frontend install

      - name: Run yarn build.
        uses: borales/actions-yarn@v2.3.0
        with:
          cmd: --cwd ./frontend build

      - name: Setup Docker Buildx.
        uses: docker/setup-buildx-action@v1
      
      - name: Login to DockerHub.
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push.
        uses: docker/build-push-action@v2
        with:
          context: ./frontend
          push: true
          tags: shp7724/react-k8s-resource-monitor:latest

  build-backend:
    name: A job to build backend project.
    runs-on: ubuntu-latest
    needs: check-diff
    if: needs.check-diff.outputs.backend-modified == 'true'
    steps:
      - uses: actions/checkout@v2

      - name: Setup Docker Buildx.
        uses: docker/setup-buildx-action@v1
      
      - name: Login to DockerHub.
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push.
        uses: docker/build-push-action@v2
        with:
          context: ./backend
          push: true
          tags: shp7724/django-k8s-resource-monitor:latest

  test:
    runs-on: ubuntu-latest
    env:
      KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
    # env:
    #   KUBE_HOST: ${{ secrets.KUBE_HOST }}
    #   KUBE_CERTIFICATE: ${{ secrets.KUBE_CERTIFICATE }}
    #   KUBE_TOKEN: ${{ secrets.KUBE_TOKEN }}
    steps:
      - uses: actions-hub/kubectl@master
        with:
          args: get all -A --insecure-skip-tls-verify

  # deploy:
  #   runs-on: ubuntu-latest
  #   name: A job to deploy to MicroK8s.
  #   steps:
  #     - uses: balchua/microk8s-actions@master
  #       with:
  #         channel: "1.19/stable"
  #         addons: '["dns", "storage", "metrics-server"]'

  #     - name: Check User
  #       run: |
  #         id
  #         sg microk8s -c 'microk8s status'

  #     - name: Test MicroK8s
  #       id: microk8s
  #       run: |
  #         set -ex
  #         kubectl get no
  #         kubectl get pods -A -o wide
  #         # wait for storage pod to be ready
  #         kubectl -n kube-system wait --for=condition=ready pod -l k8s-app=hostpath-provisioner --timeout=60s
  #         storage_ready=$?
  #         if [ $storage_ready -ne 0 ]; then
  #           echo "Error storage not ready."
  #           exit $storage_ready
  #         fi
  #     - name: Test MicroK8s commands
  #       id: microk8s-commands
  #       run: |
  #         set -ex
  #         echo "Executing microk8s status using sg command."
  #         sg microk8s -c 'microk8s status'
  #         echo "Executing microk8s status using sudo command."
  #         sudo microk8s status
